.TH "CLIFM" "1" "Febraury 10, 2021" "CliFM 0.29.0+" "CliFM Manual"
.nh
.ad l

.SH NAME
CLIFM \- A completely CLI\-based file manager inspired by the KISS principle

.SH SYNOPSIS
\fIclifm\fR [\-aAfFgGhiIlLmoOsSuUvxy] [\-c FILE] [\-k FILE] [\-p PATH] [\-P PROFILE] [-w NUM] [\-z METHOD]

.SH DESCRIPTION
CliFM is a completely text\-based, \fBshell\-like\fR file manager (no GUI nor curses at all) able to perform all the basic operations you may expect from any other FM. However, its most distinguishing characteristics are:
.sp
  \fBa)\fR An extensive and customizable list of \fBcolor codes\fR to easily identify file types and extensions.
.sp
  \fBb)\fR The use of \fBshort (and even one\-character commands) and numbers\fR (ELN's) instead of filenames. Enter 'o 12', for instance, to open a file with your default text editor or to change to the desired directory. If the \fBautocd\fR and \fBauto-open\fR functions (see below \fIac\fR and \fIad\fR commands) are enabled, which is the defaut, you only need to enter the ELN to open the file or change to directory: instead of 'o 12', just enter '12'.
.sp
With the \fBautomatic ELN expansion\fR feature you can use ELN's with external commands as well. 'diff 12 5', for example, will run 'diff' over the files corresponding to ELN's 12 and 5. \fBRanges\fR are also accepted, for example: 'rm 1\-12' or 'r 1\-12'. Since numbers could be a bit tricky when it comes to listed files, \fBTAB completion\fR is available for ELN's, just as for commands, paths, profiles, and bookmarks.
.sp
  \fBc)\fR \fBAutomatic files listing\fR: Unlike the shell 'cd' command, CliFM's built\-in \fIcd\fR function automatically lists files in the new directory.
.sp
  \fBd)\fR \fBBookmarks\fR: keep a list of your favorite directories, and even files, to get easy access to them. Example: enter 'bm' (or press Alt\-b) to open the bookmarks screen and then simply type a number or a shortcut name to access the desired bookmark. 
.sp
  \fBe)\fR The \fBSelection Box\fR allows you to drop files and directories from different parts of your filesystem (even from different instances of CliFM) and then operate on them with just one command. Example: select a few files in one instance of the program (say 's 12; cd /media; s 2 5\-6') and then paste them somewhere else using a second instance ('v sel' or 'paste sel'). Both glob and regular expressions are suppported.
.sp
  \fBf)\fR The \fBdirectory history\fR function (\fIback\fR and \fIforth\fR) keeps track of all visited directories, so that you can go back and forth to any of them by just entering 'b' or 'f' (or just pressing 'Alt\-j' and 'Alt\-k', or Shift\-Left and Shift\-Right, respectivelly). Another way of quickly navigating through visited directories is using the built-in \fBautojump\fR function. See the \fIjump\fR command below.
.sp
  \fBg)\fR An extensive list of \fBkeyboard shortcuts\fR make it even easier and faster to navigate and operate on your files. For example, instead of typing 'cd ..' to go back to the parent directory, or 's *' to select all files in the current directory, you can simply press Alt\-u (or Shift\-Up) and Alt\-a respectivelly.
.sp
  \fBh)\fR The \fBquick search\fR function makes it really easy to quickly find the files you are looking for: just enter a slash followed by the string or regular expression you want (ex: '/myfile' or '/.*\.png'), that's all.
.sp
  \fBi)\fR \fBPlugins\fR: Build your own custom commands using executable files (shell scripts or binaries). Just drop an executable file (all languages are supported) in the scripts directory, tell CLiFM to use this executable file via a custom action name, and use it as any other command.
.sp
  \fBj)\fR It is blazing \fBfast\fR and incredibly \fBlightweigth\fR. With a memory footprint below 5 MiB and a disk usage of 400 KiB, it can run on really old hardware. It is so simple that it doesn't require an X session nor any graphical environment at all, being able thus to perfectly run on the console (TTY) and even on a headless machine via a SSH or a telnet session. And if this is not enough, you can still use the \fBlight mode\fR to make it even faster.
.sp
  \fBi)\fR When running in \fBstealth mode\fR, it will leave not trace at all in the host system.
.sp
Because inspired in the \fBKISS\fR principle, CliFM is fundamentally aimed to be lightweight, fast, and simple. On Archlinux' notion of simplcity see: \fIhttps://wiki.archlinux.org/index.php/Arch_Linux#Simplicity\fR

List of CliFM features:

  1) FreeDesktop compliant Trash system
  2) Automatic files listing
  3) Command and directory history function
  4) TAB completion for commands, paths, bookmarks, profiles, color schemes, command history, and directory history via the jump command
  5) TAB ELN\-expansion
  6) More than 40 customizable keyboard shortcuts
  7) Wildcards and regex auto\-expansion
  8) Braces auto\-expansion
  9) ELN's auto\-expansion
  10) 'sel' keyword auto\-expansion
  11) Ranges auto\-expansion
  12) Bookmarks auto\-expansion
  13) Bash\-like quoting system
  14) Custom aliases and variables
  15) Customizable colors for file types and extensions
  16) Customizable prompt
  17) Shell commands execution
  18) Startup and prompt commands
  19) User profiles
  20) Commands sequential and conditional execution
  21) Built-in resource opener (lira)
  22) 9 sorting methods and reverse sorting
  23) Bulk rename
  24) Archiving and compression support
  25) Auto-cd and auto-open
  26) Plugins support via custom actions linked to executable files
  27) Symbolic links editor
  28) Regular expressions and filetype filter support for both the search and the selection function
  29) Command substitution and regular expressions for all internal commands
  30) Theming support via color schemes
  31) Privacy oriented
  32) Built-in autojump function
  33) Icons support (depends on icons-in-terminal: \fIhttps://github.com/sebastiencs/icons-in-terminal\fR)
  34) Batch symbolic links
  35) Files filter via regular expressions for the files list
  36) Up to four workspaces

.SH RATIONALE
When it comes to software, Unix/GNU\-Linux is no doubt the land of Freedom, and Freedom, so to say, is the elder sister of Choice and Alternative. Now, regarding File Managers (FM), broadly understood as a computer program providing a user interface to manage files and directories, we either stick to the CLI or Command Line Interface (the Linux built\-in console or a terminal emulator running a bare shell) or choose rather some kind of graphical alternative (be it a GUI program, in the strictest sense, or a curses\-based one). In between, however, there is nothing, or at least, almost nothing. But as the old Italian saying goes: "There is no two without three".
.sp
While the Linux console, which strictly speaking could be though of as a FM, does not actually feel as one and lacks many features (like bookmarks, files selection, a trash system, a resource opener and the like), graphical FM's offer most of these features, but only at the expense of system resources (at the very least 20MiB of RAM and most of the time a graphical X session). Heavily inspired by the KISS principle ("Keep it Simple, Stupid"), CLiFM was born as an attempt to get the best of both worlds: the speed and lightness of the CLI and the extra features of traditional FM's. It is aimed to be, briefly speaking, a wrapper of the CLI to extend and improve its functionality; CliFM feels, acts, and flies like the CLI, offering at the same time some of the most useful features of traditional FM's.
.sp
Personally, since I just dislike GUI and bloated stuff, I really felt the need of an extended and improved way to manage my files in the CLI. Indeed, CLiFM originated as an attempt to add a bookmarks function to the Bash shell, and then grew from these humble beginnings. In between the CLI and traditional FM's, we have now CLiFM, because, as the old Italian saying goes: "There is no two without three". 

.SH OPTIONS
.TP
.B \-a, \-\-no\-hidden
do not show hidden files (default)
.TP
.B \-A, \-\-show\-hidden
show hidden files
.TP
.B \-b \-\-bookmarks\-file=FILE
set an alternative bookmarks file
.TP
.B \-c \-\-config\-file=FILE
set an alternative configuration file
.TP
.B \-f, \-\-no\-folders\-first
do not list folders first
.TP
.B \-F, \-\-folders\-first
list folders first (default)
.TP
.B \-g, \-\-pager
enable Mas, the built-in pager for files listing
.TP
.B \-G, \-\-no\-pager
disable the pager (default)
.TP
.B \-h, \-\-help
show this help and exit
.TP
.B \-i, \-\-no\-case\-sensitive
no case\-sensitive files listing (default)
.TP
.B \-I, \-\-case\-sensitive
case\-sensitive files listing
.TP
.B \-k \-\-keybindings\-file=FILE
set an alternative keybindings file
.TP
.B \-l, \-\-no\-long\-view
disable long view mode (default)
.TP
.B \-L, \-\-long\-view
enable long view mode: list files and their properties
.TP
.B \-l, \-\-no\-list\-on\-the\-fly
\'cd\' works like the built\-in shell 'cd' command: change directory but do not list files automatically
.TP
.B \-L, \-\-list\-on\-the\-fly
\'cd\' lists files on the fly (default)
.TP
.B \-m, \-\-dirhist\-map
enable the directory history map
.TP
.B \-p, \-\-path=PATH
use PATH as CliFM starting path. Default starting path is current working directory
.TP
.B \-P, \-\-profile=PROFILE
use (or create) PROFILE as profile. Default profile is 'default'
.TP
.B \-s, \-\-splash
enable the splash screen
.TP
.B \-S \-\-stealth-mode
leave no trace on the host system. Nothing is read from files nor any file is created: all settings are set to the default value. However, most settings can still be controlled via command line options. Listing colors could be customized via dedicated environment variables (see the ENVIRONMENT section below).
.TP
.B \-u, \-\-no\-unicode
disable unicode
.TP
.B \-U, \-\-unicode
enable unicode to correctly list filenames containing accents, tildes, umlauts, non\-latin letters, etc. This option is enabled by default for non\-english locales
.TP
.B \-v, \-\-version
show version details and exit
.TP
.B \-w, \-\-workspace=NUM
start in workspace NUM
.TP
.B \-x, \-\-ext\-cmds
allow the use of external commands
.TP
.B \-y, \-\-light\-mode
enable the light mode to speed up CliFM
.TP
.B \-z, \-\-sort=METHOD
sort files by METHOD, where METHOD could be: 0 = none, 1 = name, 2 = size, 3 = atime, 4 = btime (ctime if not available), 5 = ctime, 6 = mtime, 7 = version (name if not available), 8 =  extension, 9 = inode.
.TP
.B \-\-no\-cd\-auto
by default, CliFM changes to directories by just specifying the corresponding ELN (e.g. '12' instead of 'cd 12'). This option forces the use of 'cd'
.TP
.B \-\-icons
enable icons
.TP
.B \-\-icons\-use\-file\-color
Instead of an specific color, icons take the color of the corresponding filename (specified either via file type or via file extension). Useful when building custom color schemes.
.TP
.B \-\-cd\-on\-quit
write last visited directory to \fI$XDG_CONFIG_HOME/clifm/.last\fR to be later accessed by the corresponding shell function at program exit. See MISCELLANOEOUS NOTES section below.
.TP
.B \-\-no\-open\-auto
same as no-cd-auto, but for files instead of directories
.TP
.B \-\-restore\-last\-path
save last visited directory to be restored in the next session
.TP
.B \-\-no\-tips
disable startup tips
.TP
.B \-\-disk\-usage
show disk usage (free/total) for the filesystem to which the current directory belongs
.TP
.B \-\-no\-dir\-indicator
do not add / indicator to directory names when running in light mode
.TP
.B \-\-classify=NUM
specify whether to classify files or not when running in light mode. 0 for no, 1 for yes, and 2 to classify executable files as well (option 2 implies running access(3) over each regular file, which is an expensive operation)
.TP
.B \-\-expand\-bookmarks
expand bookmark names into the corresponding bookmark paths and enable TAB completion for bookmark names as well. If the bookmark is, .e.g. mybookmark=/my/path, "mybo" will be completed as "mybookmark", which will be interpreted then as "/my/path".
.TP
.B \-\-share\-selbox
make the Selection Box common to different profiles
.TP
.B --opener=APPLICATION
specify a resource opener to use. If opener is not set, \fIlira\fR will be used instead
.TP
.B \-\-rl\-vi\-mode
set readline to vi editing mode (defaults to emacs editing mode)
.TP
.B \-\-max\-dirhist
maximum number of visited directories to remember
.TP
.B \-\-sort\-reverse
sort in reverse order, for example: z-a instead of a-z, which is the default order
.TP
.B \-\-no\-files\-counter
disable the files counter for directories. This option is especially useful to speed up the listing process; counting files in directories is particularly expensive
.TP
.B \-\-only\-dirs
list only directories and symbolic links to directories 
.TP
.B \-\-list\-and\-quit
list files and quit. It may be used in conjunction with \-p
.TP
.B \-\-color\-scheme=NAME
set NAME as color scheme
.TP
.B \-\-no\-columns
disable columns for files listing
.TP
.B \-\-no\-welcome\-message
disable the welcome message
.TP
.B \-\-no\-clear\-screen
do not clear the screen when listing directories
.TP
.B \-\-no\-backup\-files
do not show files ending with tilde (~)
.TP
.B \-\-enable\-logs
enable program logs
.TP
.B \-\-max\-path=NUM
set the maximun number of characters after which the current directory in the prompt line will be abreviated to the directory base name (if \\z is used in the prompt)

.TP
Options precedence order: 1) command line; 2) configuration file; 3) default values.

.SH COMMANDS
\fBNOTE:\fR ELN = Entry List Number. Example: in the line "12 openbox" (when listing files), 12 is the ELN corresponding to the file named "openbox". The slash followed by a number (/xx) after directories and symbolic links to directories (the files counter) indicates the amount of files contained by the corresponding directory, excluding current and parent directories ("." and ".." respectivelly).
.TP

.B FILE/DIR
if the \fIautocd\fR and \fIauto-open\fR functions are enabled, which is the default value, open FILE or change directory to DIR. In other words, 'FILE' amounts to 'open FILE' or 'o FILE', and 'DIR' to 'cd DIR'. ELN's, of course, are allowed. Example: '12'. Unlike the \fIopen\fR function (see below), passing an opening application is not allowed.
.TP

.B cd \fR[ELN/DIR]
when used with no argument, it changes the current directory to the default directory (HOME). Otherwise, \fIcd\fR changes the current directory to the one specified by the first argument. You can use either ELN's or a string to indicate the directory you want. Ex: 'cd 12' or 'cd ~/media'. If \fIautocd\fR is enabled, 'cd 12' and 'cd ~/media' can be written as '12' and '~/media' respectivelly.
.sp
Unlike the shell 'cd' command, CliFM's built\-in \fIcd\fR function not only changes the current directory, but also lists its content (provided the option "cd lists automatically" is enabled, which is the default) according to a comprehensive list of color codes. By default, the output of \fIcd\fR is much like this shell command: cd DIR && ls \-\-color=auto \-\-group\-directories\-first. Remote file systems are also supported: just enter 'cd ADDRESS [OPTIONS]'. For more information about this syntax see the description of the \fInet\fR command below.
.TP

.B o, open \fRELN/FILE [APPLICATION]
open FILE, which can be either a directory, in which case it works just like the \fIcd\fR command (see below), a regular file, or a symbolic link to either of the two. For example: 'o 12', 'o filename', 'o /path/to/filename'.
.sp
By default, the \fIopen\fR function will open files with the default application associated to them via the mime built\-in function (see the \fImime\fR command below). However, if you want to open a file with a different application, just add the application name as second argument, e.g. 'o 12 leafpad'. If you want to run the program in the background, simply add the ampersand character: 'o 12 &'.
.sp
If the file to be opened is an archive/compressed file, the archive function (see the \fIad\fR command below) will be executed instead.
.TP

.B j \fR[STRING ...] \fBjc\fR [STRING ...], \fBjp\fR [STRING ...], \fBje\fR, \fBjo\fR [ORDER], \fBjump\fR [e, edit] [STRING ...]
\fIj\fR is the fastest way of using the \fBautojump\fR function to quickly navigate through the jump database (i.e. a list containing the name of visited directories and the amount of times each of them was visited).
.sp
With no argument, \fIj\fR just lists the entries in the jump database, printing both the amount of times a directory was visited and the directory name itself. Otherwise, it searchs for CHAR/STR in the database and cd into the most visited matching entry, if any. Example: 'j D' will probably take you to /home/user/Downloads, provided this directory has been already visited and is the most visited match in the database.
.sp
Multiple query strings could be passed to the function. For example, 'j et mo' will first check for 'et' in the jump database and then will further filter the search using the second parameter: 'mo'. It will most probably take you (again, provided the directory has been already visited and is the most visited match) to /etc/modprobe.d directory. Bear in mind that if STR is an actual directory, \fIjump\fR will just cd into it without performing any query.
.sp
\fIj\fR accepts four modifiers: 'e', 'p' 'c', and 'o', the first standing for "edit", the second for "parent", the third for "child", and the last one for "order". Thus, 'je' will open the jump database to be edited if needed; 'jc' will search for files querying only child drectories relative to the current working directory, while 'jp' will do the same but for parent directories. 'jo', finally, allows to specify an order number (the left most value in the jump list) instead of a string or a filename. Examples:
.sp
\'jp foo\' will take you to the most visited \fBparent\fR directory containing the string "foo".
.sp
\'jc bar test\' will take you to the most visited \fBchild\fR directory containing the strings "bar" and "test".
.sp
\'jo 13\' will cd into the path corresponding to the order number 13. TAB completion is available to expand order numbers into the corresponding paths.
.sp
Finally, you can also edit the jump database using the 'e' or 'edit' option, i.e., 'j e' or 'j edit'.
.sp
TAB completion is available for this function.
.sp
To reset or modify the jump database as you whish, simply open the jump file using the 'je', edit whatever needs to be edited, save changes, and close the editor.
.TP

.B ws \fR[NUM, +, -]
CliFM offers up to four workspaces, each with its own independent paths.
.sp
With no argument, the \fIws\fR command prints the list of workspaces and its corresponding paths, highlighting the current workspace. Use NUM to switch to workspace NUM, the plus sign (+) to switch to the next workspace, and the minus sign (-) to switch to the previous workspace.
.sp
Every time an empty workspace is created, it starts in the path of the workspace from which it was invoked (in other words, in the current working directory).
.TP

.B /\fRPATTERN [\-filetype] [DIR]
this is the quick search function. Just type '/' followed by a glob or regular (or extended regular) expression, and CliFM will list all matches in the current working directory. For example, both '/*.pdf' and '/.pdf$' expressions will list all PDF files in the current working directory, the former using wildcards, and the second a regular expression. 
.sp
Bear in mind that search patterns are evaluated first as glob expressions, and then, if no matches are found, as regular expressions. Expressions containing no pattern metacharacter are automatically replaced by '/*EXP*'. For example '/test' becomes '/*test*'.
.sp
To search for files in any other directory, specify the directory name as a further argument. This argument (DIR) could be an absolute path, a relative path, or an ELN. For example, enter '/^A 7' to search for all files starting with 'A' in the directory corresponding to the ELN 7.
.sp
The result of the search could be further filtered by specifying a filter type: \-d, \-r, \-l, \-s, \-f, \-b, and \-c (directory, regular file, symbolic link, socket, FIFO/pipe, block device, and character device respectivelly). For example, '/[.-].*d$ \-d Documents/' will list all directories containing a dot or a dash and ending with 'd' in the directory named "Documents".
.TP

.B s, sel \fRELN/FILE ... n [REGEX [DIR]] [-filetype]
send one or multiple elements (either files or directories) to the Selection Box. \fIsel\fR accepts individual elements, range of elements, say 1\-6, filenames and paths, just as wildcards (globbing) and regular expressions. Just as in the \fIsearch\fR function (see above), it is also possible to further filter the list of matches indicating the desired filetype. Example: 'sel -d 1 4\-10 ^r file* filename /path/to/filename'.
.sp
When using regular expressions, the next argument, if it is a directory name, will be taken as an arugment for the previous expression. For example, 's ^d.*\.conf$' /etc' will select all files in \fI/etc\fR starting with 'd' and ending with '.conf'. If no directory is specified, the pattern will be evaluated against all files in the current working directory.
.sp
Glob and regular expressions could be used together. For example: 's ^[r|R].*d$ /etc/*.conf' will select all files starting with either 'r' or 'R' and ending with 'd' in the current working directory, plus all .conf files in \fI/etc\fR.
.sp
It is important to note however that glob expressions are evaluated before regular expressions, in such a way that any expression that could be understood by both kinds of pattern matching mechanisms will be evaluated according to the first, that is, as a glob expression. For example, '.*', as regular expression, should match all files. However, since glob expressions are evaluated first, it will only match hidden files. To select all files using a glob expression, try '.* *', or, with a regular expression: '^' or '(.*?)'.
.sp
The Selection Box is accessible to different instances of the program, provided they use the same profile (see the \fIprofile\fR command below). By default, indeed, each profile keeps a private Selection Box, being thus not accessible to other profiles. You can nonetheless modify this behaviour via the ShareSelbox option in the configuration file. If the ShareSelbox option is enabled (see the configuration file), selected files are stored in \fI/tmp/clifm/username/.selbox\fR. Otherwise, \fI/tmp/clifm/username/.selbox_profilename\fR is used (this is the default). 
.TP

.B sb, selbox
show the elements currently contained in the Selection Box.
.TP

.B ds, desel \fR[*, a, all]
deselect one or more selected elements. You can also deselect all selected elements at once by passing '*', 'a' or 'all' to the function.
.TP

.B bm, bookmarks \fR[a, add PATH] [d, del] [edit] [SHORTCUT, NAME]
with no argument, open the bookmarks menu. Here you can cd into the desired bookmark by entering either its ELN, its shortcut or its name. In this screen you can also add, remove or edit your bookmarks by simply typing 'e' to edit the bookmarks file (which is simply a list of lines with this format: [shortcut]name:path. Ex: [d]documents:/home/user/documents).
.sp
If you want to add or remove a bookmark directly from the command line, use the 'a' and 'd' arguments respectivelly. Example: 'bm a /media/misc' or 'bm d'. You can also open a bookmark by typing 'bm shortcut' or 'bm name' (in which latter case TAB completion is available).
.sp
A handy use for the bookmarks function, provided the expand-bookmarks option is enabled, is to create bookmarks using short names, which will be later easily accessible via TAB completion.  
.TP

.B ft, filter \fR[unset] [REGEX]
with no argument, print the current filter. To remove the current filter use the 'unset' option. To set a new filter enter 'ft REGEX', for example: 'ft ^\.' to exclude all hidden files.
.sp
The filter will be lost at program exit. To permanently set a files filter use the \fIFilter\fR option (in the configuration file). You can also use the CLIFM_FILTER environment variable (see below), though the value of this variable will be lost at system shutdown or reboot. 
.TP

.B alias \fR[import FILE]
with no argument, it prints the list of available aliases, if any. To write a new alias simply enter 'edit' to open the configuration file and add a line like this one: "alias name='command args...'" or "alias name='directory'".
.sp
To import aliases from a file, provided it contains aliases in the specified form, use the 'import' option. Aliases conflicting with some of the internal commands won't be imported.
.sp
However, a neat usage for the alias function is not so much to bind short keys to commands, but to files and directories visited regularly. In this way, it is possible to bind as many files or directories, no matter how deep they are in the filesystem, to very short strings, even single characters. For example, "alias w='/some/file/deep/in/the/filsystem'. Now, no matter where we are, we can just enter 'w', provided \fIautocd\fR and/or \fIauto-open\fR function are enabled, to access the file or directory we want. Theoretically at least, this procedure could be repeated until the system memory is exhausted.
.sp
To create multiple aliases for files at once, this is the recommended procedure: 1) Select all files you want to alias with the \fIsel\fR function: 's file1 file2 file3 ...'. 2) Export the selected files into a temporary file running 'exp sel'; 3) Edit this file to contain only valid alias lines: 

 alias a1='file1'
 alias b1='file2'
 alias c1='file3'

NOTE: Make sure alias names do not conflict with other commands, either internal or external. To bypass the conflicts check, performed automaically by the 'alias import' command, you can just edit the aliases file manually.

4) Finally, import this file with the \fIalias\fR function: 'alias import tmp_file'. Now, you can access any of these files by entering just a few caracters: a1, b1, and c1.
.TP

.B pin \fR[FILE/DIR]
pin a file or a directory to be accessed later via the period (,) keyword. For example, run 'pin mydir' and then access "mydir" as follows: 'cd ,' where the period is automatically expanded to the pinned file, in this case "mydir". The period keyword could be used with any command, either internal or external, e.g, 'ls ,'.
.sp
With no arguments, the function prints the current pinned file, if any. If an argument is given, it will be taken as a filename to be pinned. Running this command again, frees the previous pin and sets a new one. In other words, only one pin is supported at a time. An easy alternative to create as many pins or shortcuts as you want, and how you want, is to use the \fIalias\fR function. Bookmarks could also be used to achieve a very similar result.
.sp
At program exit, the pinned file is written to a file in the configuration directory (as .pin) to be loaded in the next session.
.TP

.B unpin
this command takes no argument. It just frees the current pin and, if it exists, deletes the .pin file generated by the \fIpin\fR command.
.TP

.B t, tr, trash  \fR[ELN/FILE ... n] [ls, list] [clear] [del, rm]
with no argument (or by passing the 'ls' option), it prints a list of currently trashed files. The 'clear' option removes all files from the trash can, while the 'del' option lists trashed files allowing you to remove one or more of them.
.sp
The trash directory is \fI$XDG_DATA_HOME/Trash\fR, usually \fI~/.local/share/Trash\fR. Since this trash system follows the freedesktop specification, it is able to handle files trashed by different Trash implementations.
.TP

.B u, undel, untrash \fR[*, a, all]
print a list of currently trashed files allowing you to choose one or more of these files to be undeleted, that is to say, restored to their original location. You can also undelete all trashed files at once using the '*', 'a' or 'all' option.
.TP

.B br, bulk \fRELN/FILE ... n
rename at once all files passed as arguments to the function. It accepts single and multiple filenames, wildcards, ELN ranges, and the 'sel' keyword. Example: 'br myfile 4\-10 sel'.
.sp
Each filename will be copied into a temporary file, which will be opened with the default text editor (via the \fImime\fR function), letting the user modify it. Once the file has been modified and saved, the modifications are printed on the screeen and the user is asked whether to proceed with the actual bulk renaming or not.
.TP

.B bl \fRELN/FILE ... n
Create symbolic links for each specified file in the current directory.
.TP

.B ac, ad \fRELN/FILE ... n
archive/compress and dearchive/decompress one or multiple files and/or directories. The archiver function brings two modes: \fIac\fR, to generate archives or compressed files, and \fIad\fR, to decompress or dearchive files, either just listing, extracting, recompressing, or mounting their content. In this latter case, the mountpoint used automatically is \fI$HOME/.config/clifm/PROFILE/mounts/ARCHIVE_NAME\fR.
.sp
The function accepts single and multiple filenames, wildcards, ELN ranges, and the 'sel' keyword. For example: 'ac sel', 'ac 4\-25 myfile', or 'ad *.tar.gz'. Multiple archive/compression formats are supported, including Zstandard. When it comes to ISO 9660 files only single files are supported.
.sp
The archive mount function for non ISO files depends on \fBarchivemount\fR, while the remaining functions depend on \fBatool\fR and other third\-party utilities for achive formats support, for example, \fBp7zip\fR. \fBp7zip\fR is also used to manage most decompressing options for ISO 9660 files, except for mount, in which case \fBmount(8)\fR is used. Creation of ISO files is done via \fBgenisoimage(1)\fR. For more information consult \fBatool(1)\fR, \fBarchivemount(1)\fR, \fBzstd(1)\fR, and \fB7z(1)\fR. 
.TP

.B b, back \fR[h, hist] [clear] [!ELN]
unlike 'cd ..', which sends you to the parent directory of the current directory, this command (with no argument) sends you back to the previously visited directory.
.sp
CliFM keeps a record of all the visited directories. You can see this list by typing 'b hist', 'b h' or 'bh', and you can access any element in this list by simply passing the corresponding ELN in this list to the \fIback\fR command. Example:
        [user@hostname] ~ $ bh
        1 /home/user
        2 /etc
        3 /proc
        [user@hostname] ~ $ b !3
        [user@hostname] /proc $ 
.sp
\fBNOTE:\fR the line printed in green indicates the current position of the \fIback\fR function in the directory history list.
.sp
Finally, you can also clear this history list by typing 'b clear'.
.TP

.B f, forth \fR[h, hist] [clear] [!ELN]
it works just like the \fIback\fR function, but it goes forward in the history record. Of course, you can use 'f hist', 'f h', 'fh', and 'f !ELN'.
.TP

.B actions \fR[edit]
with no argument, lists available custom actions. Use the 'edit' option to add, remove or modify custom actions. The aim of this function is to allow the user to easily add custom commands and functions to CliFM. In other words, the actions function is a plugins capability.
.sp
The general procedure is quite simple: a) bind a custom action name to an executable file written in any language you want, be it a shell or Python script, a C program or whatever you like (using the \fIactions.cfm\fR file located in the configuration directory). Example: "myaction=myscript.sh". b) Now, drop the corresponding script (in our example, myscript.sh) into the scripts directory (see the FILES section below). 3) Once this is done, you can call the script using the custom action name defined before as if it were any other command: run 'myaction', and myscript.sh will be executed.
.sp
All arguments passed to the action command are passed to the script or program as well (which is run via the system shell).
.sp
A ready made example could be found in the configuration directory (\fIscripts/example.sh\fR).
.TP

.B c, l [e, edit], m, md, r
short for the following commands respectivelly: 'cp -iRp', 'ln -sn', 'mv -i', 'mkdir -p', and 'rm -I' (for files) or 'rm -dIr' (for directories). To use these commands without any of these arguments, or with any other argument you need, just use the non-abbreviated command, for instance, 'cp' instead of 'c'.
.sp
The \fIln\fR command allows the use of the 'e, edit' option to modify the destination of a symbolic link. Example: 'l e 12', or 'le 12',  to relink the symbolic link corresponding to the ELN 12.
.TP

.B p, pr, prop \fRELN/FILE ... n
print file properties for ELN/FILE.
.TP

.B st, sort \fR[METHOD] [rev]
with no argument, print the current sorting method. Else, set sorting method to METHOD, where METHOD is one of: 0 = none, 1 = name, 2 = size, 3 = atime, 4 = btime (ctime, if btime is not available), 5 = ctime, 6 = mtime, 7 = version (name, if ctime is not available).
.sp
By default, files are sorted from less to more (ex: from 'a' to 'z' if using the "name" method). Use the 'rev' option to invert this ordering. Ex: 'st rev' or 'st 3 rev'. Switch back to the previous ordering running 'st rev' again.
.TP

.B n, net \fR[smb, ftp, sftp]://ADDRESS [OPTIONS]
Access a remote file system, either via SSH, FTP, or SMB protocols. To access the file system of a machine via SSH, use the following URI scheme: sftp://[USER@]HOST:[/REMOTE\-DIR] [PORT]. Bracketed elements are optional. If no user is specified, CliFM will attempt to login using the current local username. If no port is specified, the default port (22, if SSH) will be used.
.sp
To access the remote file system via SMB, this scheme should be used instead: smb://[USER@]HOST[/SHARE][/REMOTE\-DIR] [OPTIONS]. The URI scheme for FTP connections is this: ftp://HOST[:PORT] [OPTIONS]. Network resources are mounted in '/tmp/clifm/remote_dir', replacing all slashes in remote_dir by underscores. To disconnect from the remote machine, use 'fusermount3 \-u' for SSH, 'fusermount \-u' for FTP, and 'umount' for SMB, followed by the corresponding mountpoint. Examples:

  net sftp://john@192.168.0.25:Documents/misc port=2222
  fusermount3 \-u /tmp/clifm/remote/john@192.168.0.25:Documents_misc
 
  net smb://192.168.1.34/share username=laura,password=my_pass
  umount /tmp/clifm/remote/192.168.0.34_share

  net ftp://192.168.0.123:2121 user=me:mypass
  fusermount \-u /tmp/clifm/remote/192.168.0.123:2121
.sp
\fBNOTE\fR: 'fusermount3' is Linux\-specific. On FreeBSD 'umount' should be used instead.
.sp
The underlying programs used here to mount these remote file systems are: \fBsshfs(1)\fR for SFTP, \fBmount.cifs(8)\fR for SMB, and \fBcurlftpfs(1)\fR for FTP. For more information regarding the options supported by each of them, consult the correposponding documentation.
.TP

.B lm \fR[on, off]
Toggle the light mode on/off. This option, aimed to make files listing faster than the default mode, is especially usefull for really old hardware or when working on remote machines. For more details see the NOTE ON SPEED section below.
.TP

.B cs, colorschemes \fR[edit] [NAME]
with no arguments, list available color schemes. Use the 'edit' option to open the configuration file of the current color scheme. Otherwise, just switch to the color scheme NAME. TAB completion is avaiable.
.TP

.B mm, mime \fR[info ELN/FILENAME] [edit]
This is \fIlira\fR, CliFM's resource opener. The 'info' option prints the MIME information about ELN/FILENAME: its MIME type, its file extension, if any, and the application associated to this MIME type or file extension.
.sp
The 'edit' option allows you to edit and customize the MIME list file. So, if a file has no default associated application, first get its MIME info or its file extension, and then add a value for it to the MIME list file using the 'edit' option.
.sp
Each value in the MIME list file has this format: 'mime_type=application args;application args; ... n' or '*.c=application args;application args; ... n'. Example: 'plain/text=nano' or '*.c=geany \-p;leafpad;nano'. \fIlira\fR will check the first matching line, and if at least one of the specified applications exists, this one will be used to open the corresponding associated filed. Else, the next matching line will be checked.
.sp
If the MIME file is not found, CliFM will try to import MIME definitions from the default locations for the 'mimeapps.list' file as specified by the Freedesktop specification.
.TP

.B tips
print the list of CLiFM tips
.TP

.B icons \fR[on, off]
toggle icons on/off
.TP

.B x, X \fR[DIR]
open DIR, or the current working directory if DIR is not specified, in a new instance of CliFM (as root if \fIX\fR, as unprivileged user if \fIx\fR) using the value of TerminalCmd (from the configuration file) as terminal emulator. If this value is not set, 'xterm' will be used as fallback terminal emulator. This function is only available for graphical environments.
.TP

.B ;\fR[CMD], \fB:\fR[CMD]
If no CMD, run the default shell (see below the \fIshell\fR command) in the current working directory. If CMD is specified, skip all CLiFM expansions (see the Built\-in Expansions section below) and run the input string (CMD) as is via the default system shell.
.TP

.B mp, mountpoints
list available mountpoints and change the current working directory into the selected mountpoint.
.TP

.B v, paste \fR[sel] [DESTINY]
the 'paste sel' command will copy the currently selected elements, if any, into the current working directory. To copy these elements into another directory, tell 'paste' where to copy these files. Ex: 'paste sel /path/to/directory'. The \fIcopy\fR command (cp, c) could be used in the same way.
.TP

.B pf, prof, profile \fR[ls, list] [set, add, del PROFILE]
with no arguments, prints the name of the currently used profile. Use the 'ls' or 'list' option to list available profiles. To switch, add or delete a profile, use the 'set', 'add', and 'del' options respectivelly followed by the corresponding profile name. Bear in mind that, when switching profiles, command line arguments will be ignored.
.TP

.B opener \fR[default] [APPLICATION]
with no argument, prints the currently used resource opener (by default, \fIlira\fR, CliFM's built\-in opener). Otherwise, set APPLICATION as opener or, if 'default' is passed instead, use \fIlira\fR. 
.TP

.B shell \fR[SHELL]
print the current default shell for CliFM or set SHELL as the new default shell. 
.TP

.B rl, reload
Reload all settings, except those passed as command line arguments, from the configuration file.
.TP

.B msg, messages \fR[clear]
with no arguments, prints the list of messages in the current session. The 'clear' option tells CliFM to empty the messages list.
.TP

.B log \fR[clear] [on, off, status]
with no arguments, it prints the contents of the log file. If 'clear' is passed as argument, all the logs will be deleted. 'on', 'off', and 'status' enable, disable, and check the status of the \fIlog\fR function for the current session.
.TP

.B history \fR[clear] [\-n]
with no arguments, it shows the history list. If 'clear' is passed as argument, it will delete all the entries in the history file. Finally, '\-n' tells the \fIhistory\fR command to list only the last 'n' commands in the history list.
.sp
You can use the exclamation character (!) to perform some history commands:
  !!: Execute the last command.
  !n: Execute the command number 'n' in the history list.
  !\-n: Execute the last\-n command in the history list.
  ![STRING]: Execute command starting with STRING. TAB completion is available in this case.
.TP

.B edit \fR[gen] [APPLICATION]
edit the configuration file. If an application is specified, it will be used to open the configuration file. Use the 'gen' option to generate a fresh configuration file and make a copy of the old one (named clifmrc.HHMMSS).
.TP

.B exp, export [FILE ...]
with no argument, export the list of files in the current working directory to a temporary file. Otherwise, export only those specified as further arguments: they could be directories, filenames, ELN's or some search expression like "*.c".
.TP

.B dc \fR[on, off, status]
toggle the files counter function on/off.
.TP

.B splash
show the splash screen.
.TP

.B path, cwd
print the current working directory.
.TP

.B rf, refresh
refresh the screen.
.TP

.B cc, colors
print the color codes list currently used for files listing.
.TP

.B acd, autocd [on, off, status]
toggle the autocd function on/off. If set to on, 'DIR' amounts to 'cd DIR'.
.TP

.B ao, auto-open [on, off, status]
toggle the auto-open function on/off. If set to on, 'FILE' amounts to 'open FILE'.
.TP

.B kb, keybinds [edit] [default]
with no argument, prints the current keyboard codes and their associated functions. To edit the keybindings file, use the 'edit' option. Use the 'default' option To set the default values.
.TP

.B cmd, commands 
show this list of commands.
.TP

.B cl, columns \fR[on, off]
toggle columns on/off.
.TP

.B hf, hidden \fR[on, off, status]
toggle hidden files on/off.
.TP

.B ff, folders-first \fR[on, off, status]
toggle list folders first on/off.
.TP

.B pg, pager \fR[on, off, status]
toggle the pager (Mas) on/off. Useful to list directories with hundreds or thousands of files, the pager will start working, if set to on, whenever the screen is not enough to list all files.
.sp
Once in the pager, press the Down arrow key, Space or Enter to move downwards one line, or PageDown to move downwards an entire page. To go upwards, use the shortcuts provided by your terminal emulator, for example, Alt\-PageUp or Alt\-Up. Press 'c', 'p', or 'q' keys to stop the pager, and 'h' or '?' for help.
.TP
.B uc, unicode \fR[on, off, status]
toggle unicode on/off.
.TP

.B ext \fR[on, off, status]
toggle external commands on/off.
.TP

.B ver, version
show CliFM version details.
.TP

.B fs
Print an extract from 'What is Free Software?', written by Richard Stallman.
.TP

.B q, quit, exit, zz
safely quit CliFM.

.TP
.B Q
same as \fIquit\fR, but enabling the CD on quit functionality.

.SH FILE FILTERS
CliFM offers three kinds of file filters:
.sp
 a) Dot and backup files filters (for files starting with a dot or ending with a tilde respectivelly) to permanently exclude hidden and backup files from the files list. See above the corresponding options and commands.
.sp
 b) Files filter via regular expressions (using the \fIFilter\fR option in the configuration file) to permanently exclude certain groups of filenames.
.sp
 c) Local filter via the \fIQuick search\fI function (supporting both regular expressions and wildcards) to temporarily filter the current list of files.

.SH KEYBOARD SHORTCUTS
.TP
\fBM\-c:\fR Clear the current command line buffer
.TP
\fBM\-f:\fR Toggle list\-folders\-first on/off
.TP
\fBC\-r:\fR Refresh the screen
.TP
\fBM\-t:\fR Clear program messages
.TP
\fBM\-l:\fR Toggle long view mode on/off
.TP
\fBM\-m:\fR List mountpoints
.TP
\fBM\-b:\fR Launch the Bookmarks Manager
.TP
\fBM\-i:\fR Toggle hidden files on/off
.TP
\fBM\-h:\fR Show directory history
.TP
\fBM\-s:\fR Open the Selection Box
.TP
\fBM\-a:\fR Select all files in the current working directory
.TP
\fBM\-d:\fR Deselect all selected files
.TP
\fBM\-p:\fR Change to pinned directory
.TP
\fBM\-1:\fR Switch to workspace 1
.TP
\fBM\-2:\fR Switch to workspace 2
.TP
\fBM\-3:\fR Switch to workspace 3
.TP
\fBM\-4:\fR Switch to workspace 4
.TP
\fBM\-r:\fR Change to root directory
.TP
\fBM\-e, Home:\fR Change to home directory
.TP
\fBM\-u, S-Up:\fR Change to parent directory
.TP
\fBM\-j, S-Left:\fR Change to previous directory
.TP
\fBM\-k, S-Right:\fR Change to next visited directory
.TP
\fBC\-M\-j:\fR Change to first visited directory
.TP
\fBC\-M\-k:\fR Change to last visited directory
.TP
\fBC\-M\-o:\fR Switch to previous profile
.TP
\fBC\-M\-p:\fR Switch to next profile
.TP
\fBC\-M\-a:\fR Archive selected files
.TP
\fBC\-M\-e:\fR Export selected files
.TP
\fBC\-M\-r:\fR Rename selected files
.TP
\fBC\-M\-d:\fR Remove selected files 
.TP
\fBC\-M\-t:\fR Trash selected files 
.TP
\fBC\-M\-u:\fR Restore trashed files 
.TP
\fBC\-M\-b:\fR Bookmark last selected file/directory 
.TP
\fBC\-M\-g:\fR Open/change-to last selected file/directory 
.TP
\fBC\-M\-n:\fR Move selected files into the current directory
.TP
\fBC\-M\-v:\fR Copy selected files into the current directory
.TP
\fBM\-y:\fR Toggle light mode on/off
.TP
\fBM\-z:\fR Switch to previous sorting method
.TP
\fBM\-x:\fR Switch to next sorting method
.TP
\fBC\-x:\fR Launch new instance of the program
.TP
\fBF1:\fR Go to the manpage
.TP
\fBF2:\fR List commands
.TP
\fBF3:\fR List keybindings
.TP
\fBF7:\fR Open the jump database file
.TP
\fBF8:\fR Open the current color scheme file
.TP
\fBF9:\fR Open the keybindings file
.TP
\fBF10:\fR Open the configuration file
.TP
\fBF11:\fR Open the bookmarks file
.TP
\fBF12:\fR Quit
.TP
These are the default keyboard shortcuts. However, they can be freely modified using the 'kb edit' command or just editing the keybindings file (see the FILES section below).
.TP
NOTE: C stands for Control, S for Shift, and M for the Meta key (the Alt key in most keyboards).
.SH COLOR CODES
.TP
Colors are specified using the same format used by \fBdircolors(1)\fR and the LS_COLORS environment variable, namely, a colon separated list of codes with this general format: filetype=color. This is the list of filetype codes:
.sp
 di = directory
 ed = empty directory
 nd = directory with no read permission
 ne = empty directory with no read permission
 fi = regular file
 ef = empty regular file
 nf = file with no access permission
 ln = symlink
 mh = multi-hardlink file
 or = orphaned or broken symlink
 bd = block device
 cd = character device
 pi = FIFO, pipe
 so = socket
 su = SUID file
 sg = SGID file
 tw = sticky and other writable directory
 st = sticky and not other writable directory
 ow = other writable directory
 ex = executable file
 ee = empty executable file
 ca = file with capabilites
 no = unknown filetype
 uf = unaccesible files (\fBstat(3)\fR error)

.TP
The following codes are used for different interface elements:
.sp
 bm = bookmarked directory in bookmarks screen
 el = ELN color
 mi = misc indicators color (disk usage, sort method, bulk rename)
 tx = command line color
 df = default color
 dc = files counter color
 wc = welcome message color
 dh = directory history index color
 dl = dividing line color
 li = selected files indicator color
 ti = trash indicator color
 em = error message indicator color
 wm = warning message indicator  color
 nm = notice message indicator color
 si = stealth mode indicator color
.TP
Color codes are just traditional ANSI color codes less the escape character and the final 'm'. Thus, for instance, if you want non\-empty directories to be bold blue, add this to the \fIFiletypeColors\fR line in the configuration file: di=01;34. If you want ELN's to be red, add this code to the \fIInterfaceColors\fR line: el=00;31
.TP
Color codes can be used for file extensions as well using this format: *.ext=color. For example, to print C source files in bold green, add this to the \fIExtColors\fR line in the configuration file: *.c=01;32
.TP
Though by default CliFM uses only 8 colors, you can use 256 and RGB colors as well. Example: fi=04;38;2;245;76;00;48;2;00;00;255 will print regular files underlined and using a bold orange RGB color on a blue background. In this case, just make sure to use a terminal supporting RGB colors.
.TP
Filetype and file extension colors, just as interface colors, are defined in the configuration file and can be modified as you wish.
.TP
To see a colored list of the currently used file color codes run \fIcc\fR or \fIcolors\fR in CliFM.

.SH THE PROMPT
.TP
CLiFM's prompt is build from the \fIPrompt\fR line in the configuration file following almost the same escape codes and rules used by the Bash prompt, except that it does not perform command substitution nor accepts any of the Bash functions. String literals and escape codes can be used to build the prompt line and its colors. This is a list of supported escape codes:
.TP
\\xnn: The character whose hexadecimal code is nn.
\\e: Escape character
.TP
\\h: The hostname, up to the first ‘.’
.TP
\\u: The username
.TP
\\H: The full hostname
.TP
\\n: A newline character
.TP
\\r: A carriage return
.TP
\\a: A bell character
.TP
\\d: The date, in abbrevieted form (ex: “Tue May 26”)
.TP
\\s: The name of the shell (everything after the last slash) currently used by CliFM
.TP
\\S: Current workspace number
.TP
\\t: The time, in 24\-hour HH:MM:SS format
.TP
\\T: The time, in 12\-hour HH:MM:SS format
.TP
\\@: The time, in 12\-hour am/pm format
.TP
\\A: The time, in 24\-hour HH:MM format
.TP
\\w: The full current working directory, with $HOME abbreviated with a tilde
.TP
\\W: The basename of $PWD, with $HOME abbreviated with a tilde
.TP
\\p: A mix of the two above, it abbreviates the current working directory only if longer than PathMax (a value defined in the configuration file).
.TP
\\z: Exit code of the last executed command. It prints ":)" if success and ":(" in case of error
.TP
\\$ '#', if the effective user ID is 0, and '$' otherwise
.TP
\\nnn: The character whose ASCII code is the octal value nnn
.TP
\\\\: A backslash
.TP
\\[: Begin a sequence of non\-printing characters. This is mostly used to add color to the prompt line
.TP
\\]: End a sequence of non\-printing characters

.TP
By default, for example, CliFM's prompt line is this: "\\A \\u:\\H \\[\\e[00;36m\\]\\w\\n\\[\\e[0m\\]\\z\\[\\e[0;34m\\] \\$ \\[\\e[0m\\]", which once decoded should be something like this: 

 13:45 user:hostname /my/path
 :) $

.TP
with the path printed in cyan and the dollar sign in blue.

.TP
A bold green asterisk at the left of the prompt indicates that there are elements in the Selection Box. In the same way, a yellow 'T' means that there are currently files in the trash can, just as a bold blue 'S' means that the program is running in stealth mode. Finally, CliFM makes use of three kind of messages: errors (a red 'E' at the left of the prompt), warnings (a yellow 'W'), and simple notices (a green 'N').
.SH BUILT\-IN EXPANSIONS
.TP
Besides the default TAB completion for command names and paths, you can also expand ELN's using the TAB key. Example: type 'o 12', press TAB, and it becomes 'o filename ', or, if 12 refers to a directory, 'o dir/'. CliFM uses a Bash\-style quoting system, so that this filename: "this is a test@version{1}" is expanded as follows: this\\ is\\ a\\ test\\@version\\{1\\}
.TP
CliFM will automatically expand the 'sel' keyword: 'sel' indeed amounts to 'file1 file2 file3 ...' In this way, you can use the 'sel' keyword with any command. If you want to set the executable bit on several files, for instance, simply select the files you want and then run this command: 'chmod +x sel'. Or, if you want to copy or move several files into some directory: 'cp sel 12', or 'mv sel 12' (provided the ELN 12 corresponds to a directory), respectivelly. If the destiny directory is ommited, selected files are copied into the current working directory, that is to say, 'mv sel' amounts to 'mv sel .'. To trash or remove selected files, simply run 'tr sel' or 'rm sel' respectivelly. The same goes for wildcards and braces: 'chmod +x *', for example, will set the excutable bit on all files in the current working directory, while 'chmod +x file{1,2,3}' will do it for file1, file2, and file3 respectivelly.
.TP
ELN's and ELN ranges will be also automatically expanded, provided the corresponding ELN's actually exist, that is to say, provided some filename is listed on the screen under those numbers. For example: 'diff 1 118' will only expand '1', but not '118', if there is no ELN 118. In the same way, the range 1\-118 will only be expanded provided there are 118 or more elements listed on the screen. If this feature somehow conflicts with the command you want to run, say, 'chmod 644 ...', because the current amount of files is equal or larger than 644 (in which case CliFM will expand that number), then you can simply run the command as external: ';chmod 644...'
.TP
TAB completion for bookmarks, color schemes, profiles and directory history (via the \fIjump\fR command) is also available. To make use of the bookmarks completion, make sure you specify some name for your bookmarks, since these names are used by the completion function. 
.TP
Of course, combinations of all these features is also possbile. Example: 'cp sel file* 2 23\-31 .' will copy all selected files, plus all files whose name starts with "file", plus those files corresponding to the ELN's 2 and 23 through 31, into the current working directory.

.SH SHELL FUNCTIONS
CliFM includes a few shell functions to perform specific actions. Take a look at the corresponding files, in the \fIfunctions\fR directory, and follow the instructions. Needles to say, you can write your own functions.

.SH PLUGINS
Plugins are just scripts or programs (written in any language) able to add, extend or improve CliFM functionalities. Though several plugins are provided at installation time (in the \fIplugins\fR directory), you can write yours as you like, with any language you like, and for whatever goal you want. Writing plugins is generally quite easy; but your mileage may vary depending on what you are trying to achieve. A good place to start is examining the provide plugins and reading the \fIactions\fR command description and the ENVIRONMENT and FILES sections below.

.SH STANDARD INPUT (STDIN)
CliFM is able to read and list paths from the input stream. Each path in the list should be terminated with a new line character (\\n) and stripped from extra characters not belonging to the path itself. The size of the input stream buffer is 262MiB (65536 paths, provided each path is PATH_MAX size).
.sp
Each file passed via standard input will be stored as a symbolic link pointing to the original file in a temporary directory (which will be deleted at program exit) and listed on startup. Bear in mind that the restore last path function is disabled when listing in this way. Examples:
.sp
 ls -Ad /var/* | clifm
.sp
This command will pass all files in /var to CliFM
.sp
If you need to perform more specific queries, you can use \fIfind\fR as follows:
.sp
 find \-maxdepth 1 \-size +500k \-print0 | tr '\\0' '\\n' | sed 's/\\.\\///g' | clifm
.sp
The above command will pass all files in the current directory bigger than 500KiB to CliFM.
.sp
You can also use stream redirection:
.sp
 ls -Ad > list.txt
 clifm < list.txt
.sp
All operations performed on these symbolic links (provided the current working directory is the temporary directory where all these files are stored) will be performed on the target files and NOT on the symbolic links themselves.

.SH MISCELLANEOUS NOTES
.TP
For each of the internal commands (see the COMMANDS section above) you can use the semicolon to execute them sequentially and/or the double ampersand to execute them conditionally. Example: 'cmd1; cmd2 && cmd3'. 
.TP
Though you can use here external commands as well, bear in mind that, whenever at least one internal command is involved in a chained list of commands, CliFM will take care of executing this list (simply because the system shell isn't able to understand any of these commands), so that no shell inter\-process function (like pipes), nor any stream redirection or shell expression (like IF blocks or FOR loops) will be available. However, the shell is still used to run single external commands found in the chained list, but in isolation from the remaining commands in this list.
.TP
As a rule of thumb, when using chained commands make sure to always expand ELN's to avoid undesired consequences. If, for instance, you issue this command: 'touch aaa && r 3', you will end up deleting a file you were not intended to delete, simple because after the successfull execution of the first command, the ELN 3 corresponds now to a different file.
.TP
CliFM is not limited to its own set of internal commands, like open, sel, trash, etc., but it can run any external command as well, provided external commands are allowed (see the \-x option, the 'ext' command, or the configuration file). By beginning the external command by a colon or a semicolon (':', ';') you tell CliFM not to parse the input string, but instead letting this task to the system shell. However, bear in mind that CliFM is not intended to be used as a shell, but as the file manager it is.
.TP
It depends on the terminal emulator you use to correctly display non\-ASCII characters and characters from the extended ASCII charset. If, for example, you create a file named "ñandú" (the spanish word for 'rhea'), it will be correctly displayed by the Linux console, Lxterminal, and Urxvt, but not thus by Xterm or Aterm.
.TP
CliFM will create ~/.Xresources, if it doesn't already exist, for keybindings to work correctly. However, some (and even all) of these keybindings might not work in some terminals, though they do work fine on the console (TTY), xvt\-like terminal emulators like Urxvt and Aterm, and xterm\-like ones. However, keybinding can be edited freely to make them work on any terminal emulator.
.TP
When dealing with filenames containing spaces, you can use both single and double quotes (ex: "this file" or 'this file') plus escape sequences (ex: this\\ file).
.TP
By default, CliFM starts in the current working directory. However, you can always specify a different path by passing it as an argument. Ex: clifm \-p /home/user/misc. You can also permanently set up the starting path in the CliFM configuration file. If the RestoreLastPath option is set to true, CLiFM will start instead in the last visited directory, unless the starting path is specified via command line.
.TP
CliFM's default profile is "default". To create alternative profiles use the \-P option or the 'pf' command (see above).

.SH NOTE ON SPEED
If speed is still an issue, try one of the setups below (listed from slower to faster):
.TP
\fBa)\fR Default mode (all listing features enabled)
.TP
\fBb)\fR Default mode with sorting method set to "none" (sorting files could be expensive). Needless to say, if icons are enabled, disable them. Columns and files filter should also be disabled.
.TP
\fBc)\fR Default mode with FilesCounter option disabled (the files counter function could be quite time consuming, since every directory needs to be accessed via \fBreaddir(3)\fR to get the amount of files it contains)
.TP
\fBd)\fR Default mode with FilesCounter and ListFoldersFisrt options disabled (this latter needs to reorder the list of files provided by \fBscandir(3)\fR in order to place directories first, which of course is slower)
.TP
\fBe)\fR Light mode with ClassifyExec option enabled. In light mode, colors and FilesCounter are disabled, while (if not running in long view mode) every call to \fBstat(3)\fR, which could be quite time consuming, is omitted.
.TP
\fBf)\fR Light mode with Classify enabled and ClassifyExec disabled (this latter needs to call \fBaccess(3)\fR for every regular file to find out whether it is executable or not, which slows things down)
.TP
\fBg)\fR Light mode with only DirIndicator enabled
.TP
\fBh)\fR Light mode with all the four options disabled (ListFoldersFirst, DirIndicator, Classify, and ClassifyExec). The sorting method should also be set to "none" to go full speed.

.SH ENVIRONMENT
The following variables are read at initialization time:
.TP
.B CLIFM_FILE_COLORS
A colon separated list of file type color codes in the same form specified above in the COLOR CODES section
.TP
.B CLIFM_EXT_COLORS
Same as above, but for file extensions
.TP
.B CLIFM_IFACE_COLORS
Same as above, but for different element of ClIFM's interface
.TP
.B CLIFM_FILTER
Define a file filter. If set, this variable overrides the \fIFilter\fR option in the configuration file
.TP
Except when running in stealth mode, CliFM sets the following environment variables:
.TP
.B CLIFM
This variable is set to 1 to let other programs know they were spawned by CliFM
.TP
.B CLIFM_PROFILE
This variable is set to the current profile of CliFM. Specially useful  to develop CLiFM plugins on a per profile basis.
.TP
.B CLIFM_SELFILE
The path to the current selection file.
.TP
.B CLIFM_BUS
This variable contains the path of a pipe by means of which plugins can talk to CliFM. Just write to the pipe and CLiFM will hear and handle the message immediately after the plugin's execution. If the message is a path, CliFM will run the open function, changing the current directory to the new path, if a directory, or opening it with the resource opener, if a file. Otherwise, if the message is not a path, it will be taken and executed as a command. Examples:
.sp
\'echo "/tmp" > "$CLIFM_BUS"\' tells CLiFM to change the current directory to /tmp
.sp
\'echo "s *.png" > "$CLIFM_BUS"\' makes CliFM select all files in the current directory ending with ".png"
.sp
The pipe (CLIFM_BUS) is deleted immediately after the execution of its content and recreated before running any plugin.

.SH EXIT STATUS
CliFM returns the exit status of the last executed command:
.sp
\fB0\fR		Successfull execution
.sp
\fB1\fR		Error

.SH FILES
.TP

.B CONFIGURATION FILE
The configuration file is \fI$XDG_CONFIG_HOME/clifm/profiles/PROFILE/clifmrc\fR.
Here you can permanently set up CliFM options, add aliases and some prompt commands (which will be executed immediately before each new prompt line). Just recall that in order to use prompt commands you must allow the use of external commands. See the \-x option and the 'ext' command above.
.sp
A description for each option in the configuration file can be found in the configuration file itself.
.TP

.B PROFILE FILE
The profile file is \fI$XDG_CONFIG_HOME/clifm/profiles/PROFILE/profile.cfm\fR.
In this file you can add those commands you want to be executed at startup. You can also permanently set here some custom variables, ex: 'dir="/path/to/folder"'. This variable may be used as a shorcut to that folder, for instance: 'cd $dir'. Custom variables could also be temporarily defined via the command prompt: Ex: user@hostname ~ $ var="This is a test". Temporary variables will be removed at program exit.
.TP

.B KEYBINDINGS FILE
The keybindings file is \fI$XDG_CONFIG_HOME/clifm/keybindings\fR. This file is used to specify the keyboard shortcuts used for some ClifM's functions. The format for each kyebinding is always "keyseq:function", where 'keyseq' is an escape sequence in GNU emacs style.
.TP

.B SCRIPTS DIRECTORY
The directory used to store programs or scripts pointed to by actions (in other words, plugins) is \fI$XDG_CONFIG_HOME/clifm/scripts\fR.
.TP

.B COLORS DIRECTORY
This directory, \fI$XDG_CONFIG_HOME/clifm/colors\fR, contains available color schemes as files with a .cfm extension. You can create as many color schemes as you want by just dropping them in this directory. The default color scheme file (default.cfm) could be used as a guide.
.TP

.B ACTIONS FILE
The file used to define custom actions is \fI$XDG_CONFIG_HOME/clifm/profiles/PROFILE/actions.cfm\fR.
.TP

.B MIMELIST FILE:
The mime list file is \fI$XDG_CONFIG_HOME/clifm/profiles/PROFILE/mimelist.cfm\fR. It is a list of filetypes and file extensions and their associated applications used by \fIlira\fR.
.TP

.B BOOKMARKS FILE
The bookmarks file is \fI$XDG_CONFIG_HOME/clifm/profiles/PROFILE/bookmarks.cfm\fR
Just the list of the user's bookmarks used by the bookmarks function.
.TP

.SH HISTORY FILE
The history file is \fI~/.config/clifm/profiles/PROFILE/history.cfm\fR.
A list of commands entered by the user and used by the history function.
.TP

.B COMMANDS LOG FILE
The commands log file is \fI$XDG_CONFIG_HOME/clifm/profiles/PROFILE/log.cfm\fR.
The file contains a series of fields separated by a colon in the following way: 'date:user:current_dir:command. All commands executed as external will be logged.
.TP

.B MESSAGES LOG FILE
The messages log file is \fI$XDG_CONFIG_HOME/clifm/profiles/PROFILE/messages.cfm\fR.
A file containing a list of system messages, either errors, warnings, or simple notices. The messages log format is: "[date] message".
.TP

\fBNOTE\fR: If \fB$XDG_CONFIG_HOME\fR is not set, \fB$HOME/.config/\fR is used instead.

.SH CONFORMING TO
CLiFM is C99 compliant, and, if compiled with the _BE_POSIX flag, it is POSIX.1-2008 conformant as well. If not, only two non-POSIX functions are used: \fBstatx(2)\fR (Linux specific), to get files birth time, and \fBstrverscmp(3)\fR (a GNU extension), to list files by version.

.SH BUGS AND FEATURE REQUESTS
Report at <https://github.com/leo\-arch/clifm/issues>

.SH AUTHOR
L. M. Abramovich
